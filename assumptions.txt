We decided to split the 'accomodation' entity into different smaller entities each with one or two attributes. Since most of these attributes can be reused for different listings, we need to generate all possible combinations of these entities, and by splitting them we decrease drastically the number of generated combinations. We did not split policy because it has up to 16 combinations, which is reasonable. 
Other change we made was turning the 'Pricing' entity into a full one, as opposed to a weak entity. The entity can be reused by another listing which has the exact same values, so it should not be deleted when a listing is deleted.

A small change was the one-to-one relation of liting with Description. This will be unique for that listing so this constraint had to be added.

Another small change was made to the relation of Calendar with Listing. After checking the data we decided that it was not true that there should be an 'at least one constraint' here, so it was removed.

The 'host_neighbourhood' attribute in Host was removed. Insteaad we decided to add a direct relation of Host with Neighborhood. This makes a lot of sense from a practical point of view (there was no need or advantage to keep the neighbourhood as an attribute).

Finally, we changed the Review Entity. We had misunderstood the significance of the attributes such as 'review_scores_rating', 'review_score_accuracy' etc. as multiple ratings given by in each review. What they were actually supposed to do was represent an aggregation of the scores received by all the reviews for that listing. That's why we decided to put all of these attributes as a weak entity named 'Score' which has a one-to-one relation with Listing. The two atributes ('comments' and 'review_date') which were actually given by each review to the listing, are now set as attributes of the 'reviewed' relation.

____________________________________________________________

Bedding had NAN values, which we replaced with 0

Description: every NAN was replaced either eith an empty string or wit -1 in the case of square feet

The description_id is an incrementing number starting from 0

Reviewer: The data contained two pairs of users with the same reviewer_id but different reviewer_name so we decided to drop one of each pair (casa nuna and Ines) as it is an anomally.

Pricing: Most of the listings contained values for the daily price but not the weekly and the monthly. So, to fill the missing entries we multiplied the daily price by 7 and 30 accordingly. For the security deposit and the cleaning fee we decided to put 0 in the missing entries.

Policy: With regards to the old ER table we removed the policy_id and replaced it with cancellation_policy. The other boolean attributes were transformed to relationship attributes.

Score: There were listings that had no reviews so all their entries where NaN. We replaced these values with -1.

Provides had some duplicate lines, meaning that some listings mentioned some amenities more than once. We dropped them.

While observing the data, we realized that users inserted Madrid, Barcelona and Berlin with many different ways. We decided to remove any confusion from future queries by replacing all that by just the proper names of the cities.

In the Listing entity we added the host_name because it drastically fascilitated our queries.

In the verified_by entity there where many host_ids repeating and having the same verifications (same host and verification for different listings) so we decided to drop the duplicates